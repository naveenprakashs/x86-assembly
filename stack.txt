base pointer -> starting address of the stack
stack pointer -> ending address of the stack

base pointer and stack pointer both creates a stack frame for a function ( starting address in the stack - ending address in the stack makes  a stack frame )

when we enter a function on we have to create a stack frame for that function 
when we leave a function we have to restores the stack frame of the caller function 

creating stack frame for a function
-----------------------------------
to create a stack frame we have to assign correct values for base pointer and stack pointer

for base pointer we have to initialize the base pointer with the value of stack pointer
for stack pointer we have to subtract the stack pointer with number of bytes we need.

restoring the frame
-------------------
to restore the stack frame we have to assing the previous value for base pointer and stack pointer. 

for restoring the stack pointer we have to assing the current function's base pointer to stack pointer. 
for restoring the base pointer we have to push previous functions base pointer as first thing in our function , 
then after clearing the stack pointer we have to POP stack to restore the base pointer.


PUSH -> push instruction automatically decrements the stack before pushing the value to the stack
POP -> pop instruction automatically increments the stack after the poping the value out of the stack


CALL -> call instruction automatically decrements the stack before pushing return address to the stack
RET -> return instruction automatically increments the stack after poping the return address out of the stack
